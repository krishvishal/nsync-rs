/* automatically generated by rust-bindgen 0.72.0 */

pub type __time_t = ::core::ffi::c_long;
pub type __syscall_slong_t = ::core::ffi::c_long;
pub type nsync_atomic_uint32_ = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nsync_dll_element_s_ {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nsync_mu_s_ {
    pub word: nsync_atomic_uint32_,
    pub waiters: *mut nsync_dll_element_s_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nsync_mu_s_"][::std::mem::size_of::<nsync_mu_s_>() - 16usize];
    ["Alignment of nsync_mu_s_"][::std::mem::align_of::<nsync_mu_s_>() - 8usize];
    ["Offset of field: nsync_mu_s_::word"][::std::mem::offset_of!(nsync_mu_s_, word) - 0usize];
    ["Offset of field: nsync_mu_s_::waiters"]
        [::std::mem::offset_of!(nsync_mu_s_, waiters) - 8usize];
};
pub type nsync_mu = nsync_mu_s_;
unsafe extern "C" {
    pub fn nsync_mu_init(mu: *mut nsync_mu);
}
unsafe extern "C" {
    pub fn nsync_mu_lock(mu: *mut nsync_mu);
}
unsafe extern "C" {
    pub fn nsync_mu_unlock(mu: *mut nsync_mu);
}
unsafe extern "C" {
    pub fn nsync_mu_trylock(mu: *mut nsync_mu) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nsync_mu_rlock(mu: *mut nsync_mu);
}
unsafe extern "C" {
    pub fn nsync_mu_runlock(mu: *mut nsync_mu);
}
unsafe extern "C" {
    pub fn nsync_mu_rtrylock(mu: *mut nsync_mu) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nsync_mu_assert_held(mu: *const nsync_mu);
}
unsafe extern "C" {
    pub fn nsync_mu_rassert_held(mu: *const nsync_mu);
}
unsafe extern "C" {
    pub fn nsync_mu_is_reader(mu: *const nsync_mu) -> ::core::ffi::c_int;
}
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type nsync_time = timespec;
unsafe extern "C" {
    pub static nsync_time_no_deadline: nsync_time;
}
unsafe extern "C" {
    pub static nsync_time_zero: nsync_time;
}
unsafe extern "C" {
    pub fn nsync_time_now() -> nsync_time;
}
unsafe extern "C" {
    pub fn nsync_time_sleep(delay: nsync_time) -> nsync_time;
}
unsafe extern "C" {
    pub fn nsync_time_add(a: nsync_time, b: nsync_time) -> nsync_time;
}
unsafe extern "C" {
    pub fn nsync_time_sub(a: nsync_time, b: nsync_time) -> nsync_time;
}
unsafe extern "C" {
    pub fn nsync_time_cmp(a: nsync_time, b: nsync_time) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nsync_time_ms(ms: ::core::ffi::c_uint) -> nsync_time;
}
unsafe extern "C" {
    pub fn nsync_time_us(us: ::core::ffi::c_uint) -> nsync_time;
}
unsafe extern "C" {
    pub fn nsync_time_s_ns(s: time_t, ns: ::core::ffi::c_uint) -> nsync_time;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nsync_note_s_ {
    _unused: [u8; 0],
}
unsafe extern "C" {
    pub fn nsync_mu_wait(
        mu: *mut nsync_mu,
        condition: ::std::option::Option<
            unsafe extern "C" fn(condition_arg: *const ::core::ffi::c_void) -> ::core::ffi::c_int,
        >,
        condition_arg: *const ::core::ffi::c_void,
        condition_arg_eq: ::std::option::Option<
            unsafe extern "C" fn(
                a: *const ::core::ffi::c_void,
                b: *const ::core::ffi::c_void,
            ) -> ::core::ffi::c_int,
        >,
    );
}
unsafe extern "C" {
    pub fn nsync_mu_wait_with_deadline(
        mu: *mut nsync_mu,
        condition: ::std::option::Option<
            unsafe extern "C" fn(condition_arg: *const ::core::ffi::c_void) -> ::core::ffi::c_int,
        >,
        condition_arg: *const ::core::ffi::c_void,
        condition_arg_eq: ::std::option::Option<
            unsafe extern "C" fn(
                a: *const ::core::ffi::c_void,
                b: *const ::core::ffi::c_void,
            ) -> ::core::ffi::c_int,
        >,
        abs_deadline: nsync_time,
        cancel_note: *mut nsync_note_s_,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nsync_mu_unlock_without_wakeup(mu: *mut nsync_mu);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nsync_cv_s_ {
    pub word: nsync_atomic_uint32_,
    pub waiters: *mut nsync_dll_element_s_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nsync_cv_s_"][::std::mem::size_of::<nsync_cv_s_>() - 16usize];
    ["Alignment of nsync_cv_s_"][::std::mem::align_of::<nsync_cv_s_>() - 8usize];
    ["Offset of field: nsync_cv_s_::word"][::std::mem::offset_of!(nsync_cv_s_, word) - 0usize];
    ["Offset of field: nsync_cv_s_::waiters"]
        [::std::mem::offset_of!(nsync_cv_s_, waiters) - 8usize];
};
pub type nsync_cv = nsync_cv_s_;
unsafe extern "C" {
    pub fn nsync_cv_init(cv: *mut nsync_cv);
}
unsafe extern "C" {
    pub fn nsync_cv_signal(cv: *mut nsync_cv);
}
unsafe extern "C" {
    pub fn nsync_cv_broadcast(cv: *mut nsync_cv);
}
unsafe extern "C" {
    pub fn nsync_cv_wait(cv: *mut nsync_cv, mu: *mut nsync_mu);
}
unsafe extern "C" {
    pub fn nsync_cv_wait_with_deadline(
        cv: *mut nsync_cv,
        mu: *mut nsync_mu,
        abs_deadline: nsync_time,
        cancel_note: *mut nsync_note_s_,
    ) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nsync_cv_wait_with_deadline_generic(
        cv: *mut nsync_cv,
        mu: *mut ::core::ffi::c_void,
        lock: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
        unlock: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
        abs_deadline: nsync_time,
        cancel_note: *mut nsync_note_s_,
    ) -> ::core::ffi::c_int;
}
pub type nsync_note = *mut nsync_note_s_;
unsafe extern "C" {
    pub fn nsync_note_new(parent: nsync_note, abs_deadline: nsync_time) -> nsync_note;
}
unsafe extern "C" {
    pub fn nsync_note_free(n: nsync_note);
}
unsafe extern "C" {
    pub fn nsync_note_notify(n: nsync_note);
}
unsafe extern "C" {
    pub fn nsync_note_is_notified(n: nsync_note) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nsync_note_wait(n: nsync_note, abs_deadline: nsync_time) -> ::core::ffi::c_int;
}
unsafe extern "C" {
    pub fn nsync_note_expiry(n: nsync_note) -> nsync_time;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nsync_counter_s_ {
    _unused: [u8; 0],
}
pub type nsync_counter = *mut nsync_counter_s_;
unsafe extern "C" {
    pub fn nsync_counter_new(value: u32) -> nsync_counter;
}
unsafe extern "C" {
    pub fn nsync_counter_free(c: nsync_counter);
}
unsafe extern "C" {
    pub fn nsync_counter_add(c: nsync_counter, delta: i32) -> u32;
}
unsafe extern "C" {
    pub fn nsync_counter_value(c: nsync_counter) -> u32;
}
unsafe extern "C" {
    pub fn nsync_counter_wait(c: nsync_counter, abs_deadline: nsync_time) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nsync_waitable_s {
    pub v: *mut ::core::ffi::c_void,
    pub funcs: *const nsync_waitable_funcs_s,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nsync_waitable_s"][::std::mem::size_of::<nsync_waitable_s>() - 16usize];
    ["Alignment of nsync_waitable_s"][::std::mem::align_of::<nsync_waitable_s>() - 8usize];
    ["Offset of field: nsync_waitable_s::v"][::std::mem::offset_of!(nsync_waitable_s, v) - 0usize];
    ["Offset of field: nsync_waitable_s::funcs"]
        [::std::mem::offset_of!(nsync_waitable_s, funcs) - 8usize];
};
unsafe extern "C" {
    pub fn nsync_wait_n(
        mu: *mut ::core::ffi::c_void,
        lock: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
        unlock: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::core::ffi::c_void)>,
        abs_deadline: nsync_time,
        count: ::core::ffi::c_int,
        waitable: *mut *mut nsync_waitable_s,
    ) -> ::core::ffi::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nsync_waiter_s {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nsync_waitable_funcs_s {
    pub ready_time: ::std::option::Option<
        unsafe extern "C" fn(v: *mut ::core::ffi::c_void, nw: *mut nsync_waiter_s) -> nsync_time,
    >,
    pub enqueue: ::std::option::Option<
        unsafe extern "C" fn(
            v: *mut ::core::ffi::c_void,
            nw: *mut nsync_waiter_s,
        ) -> ::core::ffi::c_int,
    >,
    pub dequeue: ::std::option::Option<
        unsafe extern "C" fn(
            v: *mut ::core::ffi::c_void,
            nw: *mut nsync_waiter_s,
        ) -> ::core::ffi::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of nsync_waitable_funcs_s"][::std::mem::size_of::<nsync_waitable_funcs_s>() - 24usize];
    ["Alignment of nsync_waitable_funcs_s"]
        [::std::mem::align_of::<nsync_waitable_funcs_s>() - 8usize];
    ["Offset of field: nsync_waitable_funcs_s::ready_time"]
        [::std::mem::offset_of!(nsync_waitable_funcs_s, ready_time) - 0usize];
    ["Offset of field: nsync_waitable_funcs_s::enqueue"]
        [::std::mem::offset_of!(nsync_waitable_funcs_s, enqueue) - 8usize];
    ["Offset of field: nsync_waitable_funcs_s::dequeue"]
        [::std::mem::offset_of!(nsync_waitable_funcs_s, dequeue) - 16usize];
};
unsafe extern "C" {
    pub static nsync_note_waitable_funcs: nsync_waitable_funcs_s;
}
unsafe extern "C" {
    pub static nsync_counter_waitable_funcs: nsync_waitable_funcs_s;
}
unsafe extern "C" {
    pub static nsync_cv_waitable_funcs: nsync_waitable_funcs_s;
}
pub type nsync_once = nsync_atomic_uint32_;
unsafe extern "C" {
    pub fn nsync_run_once(once: *mut nsync_once, f: ::std::option::Option<unsafe extern "C" fn()>);
}
unsafe extern "C" {
    pub fn nsync_run_once_arg(
        once: *mut nsync_once,
        farg: ::std::option::Option<unsafe extern "C" fn(arg: *mut ::core::ffi::c_void)>,
        arg: *mut ::core::ffi::c_void,
    );
}
unsafe extern "C" {
    pub fn nsync_run_once_spin(
        once: *mut nsync_once,
        f: ::std::option::Option<unsafe extern "C" fn()>,
    );
}
unsafe extern "C" {
    pub fn nsync_run_once_arg_spin(
        once: *mut nsync_once,
        farg: ::std::option::Option<unsafe extern "C" fn(arg: *mut ::core::ffi::c_void)>,
        arg: *mut ::core::ffi::c_void,
    );
}
unsafe extern "C" {
    pub fn nsync_mu_debug_state(
        mu: *mut nsync_mu,
        buf: *mut ::core::ffi::c_char,
        n: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn nsync_cv_debug_state(
        cv: *mut nsync_cv,
        buf: *mut ::core::ffi::c_char,
        n: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn nsync_mu_debug_state_and_waiters(
        mu: *mut nsync_mu,
        buf: *mut ::core::ffi::c_char,
        n: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn nsync_cv_debug_state_and_waiters(
        cv: *mut nsync_cv,
        buf: *mut ::core::ffi::c_char,
        n: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn nsync_mu_debugger(mu: *mut nsync_mu) -> *mut ::core::ffi::c_char;
}
unsafe extern "C" {
    pub fn nsync_cv_debugger(cv: *mut nsync_cv) -> *mut ::core::ffi::c_char;
}
